// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"context"
	"github.com/KatharsisTL/transport-generator-example/internal/api/service"
	"github.com/rs/zerolog"
)

type serverHello struct {
	svc   service.Hello
	hello HelloHello
}

type MiddlewareSetHello interface {
	Wrap(m MiddlewareHello)
	WrapHello(m MiddlewareHelloHello)

	WithTrace()
	WithMetrics()
	WithLog(log zerolog.Logger)
}

func newServerHello(svc service.Hello) *serverHello {
	return &serverHello{
		hello: svc.Hello,
		svc:   svc,
	}
}

func (srv *serverHello) Wrap(m MiddlewareHello) {
	srv.svc = m(srv.svc)
	srv.hello = srv.svc.Hello
}

func (srv *serverHello) Hello(ctx context.Context, name string) (resp string, err error) {
	return srv.hello(ctx, name)
}

func (srv *serverHello) WrapHello(m MiddlewareHelloHello) {
	srv.hello = m(srv.hello)
}

func (srv *serverHello) WithTrace() {
	srv.Wrap(traceMiddlewareHello)
}

func (srv *serverHello) WithMetrics() {
	srv.Wrap(metricsMiddlewareHello)
}

func (srv *serverHello) WithLog(log zerolog.Logger) {
	srv.Wrap(loggerMiddlewareHello(log))
}

// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"context"
	"github.com/KatharsisTL/transport-generator-example/internal/api/service"
	"github.com/rs/zerolog"
	"github.com/seniorGolang/dumper/viewer"
	"time"
)

type loggerHello struct {
	next service.Hello
	log  zerolog.Logger
}

func loggerMiddlewareHello(log zerolog.Logger) MiddlewareHello {
	return func(next service.Hello) service.Hello {
		return &loggerHello{
			log:  log,
			next: next,
		}
	}
}

func (m loggerHello) Hello(ctx context.Context, name string) (resp string, err error) {
	defer func(begin time.Time) {
		fields := map[string]interface{}{
			"method":   "hello",
			"request":  viewer.Sprintf("%+v", requestHelloHello{Name: name}),
			"response": viewer.Sprintf("%+v", responseHelloHello{Resp: resp}),
			"service":  "Hello",
			"took":     time.Since(begin).String(),
		}
		if ctx.Value(headerRequestID) != nil {
			fields["requestID"] = ctx.Value(headerRequestID)
		}
		if err != nil {
			m.log.Error().Err(err).Fields(fields).Msg("call hello")
			return
		}
		m.log.Info().Fields(fields).Msg("call hello")
	}(time.Now())
	return m.next.Hello(ctx, name)
}

// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"context"
	"fmt"
	"github.com/KatharsisTL/transport-generator-example/internal/api/service"
	"github.com/go-kit/kit/metrics"
	"time"
)

type metricsHello struct {
	next            service.Hello
	requestCount    metrics.Counter
	requestCountAll metrics.Counter
	requestLatency  metrics.Histogram
}

func metricsMiddlewareHello(next service.Hello) service.Hello {
	return &metricsHello{
		next:            next,
		requestCount:    RequestCount.With("service", "Hello"),
		requestCountAll: RequestCountAll.With("service", "Hello"),
		requestLatency:  RequestLatency.With("service", "Hello"),
	}
}

func (m metricsHello) Hello(ctx context.Context, name string) (resp string, err error) {

	defer func(begin time.Time) {
		m.requestLatency.With("method", "hello", "success", fmt.Sprint(err == nil)).Observe(time.Since(begin).Seconds())
	}(time.Now())

	defer m.requestCount.With("method", "hello", "success", fmt.Sprint(err == nil)).Add(1)

	m.requestCountAll.With("method", "hello").Add(1)

	return m.next.Hello(ctx, name)
}
